apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: cknix.csi.store
spec:
  attachRequired: false
  podInfoOnMount: true
  volumeLifecycleModes:
    - Persistent
    - Ephemeral
  fsGroupPolicy: File
  requiresRepublish: false
  storageCapacity: false
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: cknix-csi
provisioner: cknix.csi.store
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: supervisorconfig
  namespace: default
data:
  supervisord.conf: |
    [supervisorctl]
    serverurl=unix:///run/supervisor.sock
  controller.conf: |
    [unix_http_server]
    chmod=0700
    file=/run/supervisor.sock

    [rpcinterface:supervisor]
    supervisor.rpcinterface_factory=supervisor.rpcinterface:make_main_rpcinterface

    [supervisord]
    logfile=/dev/stdout
    logfile_maxbytes=0
    logfile_backups=0
    childlogdir=/var/log
    pidfile=/run/supervisord.pid

    [program:cknix-csi]
    autorestart=true
    autostart=true
    command=nix run --file /cknix/default.nix spackages.cknix-csi -- --controller --loglevel=DEBUG
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0

    [program:attic-server]
    autorestart=true
    autostart=true
    command=nix run --file /cknix/default.nix spkgs.attic-server
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0

  node.conf: |
    [unix_http_server]
    chmod=0700
    file=/run/supervisor.sock

    [rpcinterface:supervisor]
    supervisor.rpcinterface_factory=supervisor.rpcinterface:make_main_rpcinterface

    [supervisord]
    logfile=/dev/stdout
    logfile_maxbytes=0
    logfile_backups=0
    childlogdir=/var/log
    ;logfile=/var/log/supervisord.log
    pidfile=/run/supervisord.pid

    [program:cknix-csi]
    autorestart=true
    autostart=true
    command=nix run --file /cknix/default.nix spackages.cknix-csi -- --node --loglevel=DEBUG
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cknix-csi-node
  namespace: default
spec:
  selector:
    matchLabels:
      app: cknix-csi-node
  template:
    metadata:
      labels:
        app: cknix-csi-node
    spec:
      serviceAccountName: cknix
      hostNetwork: true
      initContainers:
      # --- init container: copy /nix to /nix2 which will be mounted in /nix in real container ---
      - name: init
        command:
        - "initCopy"
        image: rg.nl-ams.scw.cloud/lillecarl/cknix:latest
        volumeMounts:
        - mountPath: /nix2
          name: cknix-store
        imagePullPolicy: Always
      # --- CSI driver: CSI grpc implementation ---
      containers:
      - name: cknix-csi-node
        image: rg.nl-ams.scw.cloud/lillecarl/cknix:latest
        command:
        - "supervisord"
        - "--configuration"
        - "/etc/supervisor/node.conf"
        securityContext:
          privileged: true
        env:
        - name: CSI_ENDPOINT
          value: unix:///csi/csi.sock
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: socket-dir
          mountPath: /csi

        - name: kubelet-dir
          mountPath: /var/lib/kubelet
          mountPropagation: "Bidirectional"

        - name: cknix-store
          mountPath: /nix
          mountPropagation: "HostToContainer"

        - name: registration-dir
          mountPath: /registration

        - name: supervisorconfig
          mountPath: /etc/supervisor

        - name: cknixdev
          mountPath: /cknix

      # --- CSI Sidecar: node-driver-registrar ---
      - name: cknix-csi-registrar
        image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.10.0
        args:
        - --v=5
        - --csi-address=/csi/csi.sock
        - --kubelet-registration-path=/var/lib/kubelet/plugins/cknix.csi.nixstore/csi.sock
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
        - name: kubelet-dir
          mountPath: /var/lib/kubelet
        - name: registration-dir
          mountPath: /registration

      # --- CSI Sidecar: liveness-probe ---
      - name: cknix-csi-liveness
        image: registry.k8s.io/sig-storage/livenessprobe:v2.12.0
        args:
        - --csi-address=/csi/csi.sock
        - --v=5
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
        - name: registration-dir
          mountPath: /registration

      volumes:
      - name: cknix-store
        hostPath:
          path: /var/lib/cknix/nix
          type: DirectoryOrCreate

      - name: socket-dir
        hostPath:
          path: /var/lib/kubelet/plugins/cknix.csi.nixstore/
          type: DirectoryOrCreate

      - name: kubelet-dir
        hostPath:
          path: /var/lib/kubelet
          type: Directory

      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry

      - name: supervisorconfig
        configMap:
          name: supervisorconfig

      - name: cknixdev
        hostPath:
          path: /home/lillecarl/Code/cknix
          type: Directory
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cknix-csi-controller
  namespace: default
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: cknix-csi-controller
  template:
    metadata:
      labels:
        app: cknix-csi-controller
    spec:
      serviceAccountName: cknix
      initContainers:
      # --- init container: copy /nix to /nix2 which will be mounted in /nix in real container ---
      - name: init
        command:
        - "initCopy"
        image: rg.nl-ams.scw.cloud/lillecarl/cknix:latest
        volumeMounts:
        - mountPath: /nix2
          name: nix-store
        imagePullPolicy: Always
      containers:
        # --- CSI Controller container ---
        - name: cknix-csi-controller
          image: rg.nl-ams.scw.cloud/lillecarl/cknix:latest
          command:
          - "supervisord"
          - "--configuration"
          - "/etc/supervisor/controller.conf"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /nix
              name: nix-store

            - name: supervisorconfig
              mountPath: /etc/supervisor

            - name: socket-dir
              mountPath: /csi

            - name: cknixdev
              mountPath: /cknix

        # --- CSI Sidecar: external-provisioner ---
        - name: csi-provisioner
          image: registry.k8s.io/sig-storage/csi-provisioner:v4.0.0
          args:
            - --csi-address=/csi/csi.sock
            - --v=5
            - --extra-create-metadata
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi

        # --- CSI Sidecar: liveness-probe ---
        - name: liveness-probe
          image: registry.k8s.io/sig-storage/livenessprobe:v2.12.0
          args:
            - --csi-address=/csi/csi.sock
            - --v=5
          volumeMounts:
            - name: socket-dir
              mountPath: /csi

      volumes:
        - name: socket-dir
          emptyDir: {}

        - name: nix-store
          hostPath:
            path: /var/lib/cknix/controller
            type: DirectoryOrCreate

        - name: supervisorconfig
          configMap:
            name: supervisorconfig

        - name: cknixdev
          hostPath:
            path: /home/lillecarl/Code/cknix
            type: Directory
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cknix
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cknix-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cknix
subjects:
- kind: ServiceAccount
  name: cknix
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cknix
  namespace: default
