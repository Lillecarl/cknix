---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shell-operator
  namespace: default
  labels:
    app: shell-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shell-operator
  template:
    metadata:
      labels:
        app: shell-operator
    spec:
      serviceAccountName: shell-operator
      containers:
      - name: shell-operator
        image: flant/shell-operator:latest
        imagePullPolicy: Always
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: SHELL_OPERATOR_HOOKS_DIR
          value: "/hooks"
        volumeMounts:
        - name: hooks
          mountPath: /hooks
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        # Add health checks
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9115
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9115
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: hooks
        configMap:
          name: shell-operator-hooks
          defaultMode: 0755
        items:
        - key: cknix-expression-watcher
          path: cknix-expression-watcher
          mode: 0755
        - key: cknix-expression-watcher.yaml
          path: lib/cknix-expression-watcher.yaml
          mode: 0644
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: shell-operator-hooks
  namespace: default
data:
  cknix-expression-watcher.yaml: |
    configVersion: v1
    kubernetes:
      - name: "cknix-expression-changes"
        kind: Expression
        apiVersion: cknix.cool/v1
        executeHookOnEvent: ["Added", "Modified", "Deleted"]
        namespace: {}
        jqFilter: ".spec.data.expr"
  cknix-expression-watcher: |
    #!/bin/bash

    # Shell-operator hook for watching cknix Expression CRD changes
    # This hook monitors expressions.cknix.cool custom resources and executes
    # a placeholder script when changes occur.

    set -e

    # Hook configuration - output when called with --config
    if [[ $1 == "--config" ]]; then
      cat <<EOF
    configVersion: v1
    kubernetes:
      - name: "cknix-expression-changes"
        kind: Expression
        apiVersion: cknix.cool/v1
        executeHookOnEvent: ["Added", "Modified", "Deleted"]
        namespace: {}
        jqFilter: ".spec.data.expr"
    EOF
      exit 0
    fi

    # Main hook execution
    echo "=== cknix Expression Watcher Hook Triggered ==="
    echo "Timestamp: $(date)"
    echo "Binding context path: $BINDING_CONTEXT_PATH"

    # Check if binding context is available
    if [[ -z "$BINDING_CONTEXT_PATH" ]]; then
        echo "ERROR: No binding context path provided"
        exit 1
    fi

    if [[ ! -f "$BINDING_CONTEXT_PATH" ]]; then
        echo "ERROR: Binding context file not found: $BINDING_CONTEXT_PATH"
        exit 1
    fi

    # Read and parse binding context
    echo "=== Binding Context ==="
    cat "$BINDING_CONTEXT_PATH" | jq .

    # Extract event details
    BINDING_CONTEXT=$(cat "$BINDING_CONTEXT_PATH")
    EVENT_TYPE=$(echo "$BINDING_CONTEXT" | jq -r '.[0].type')
    BINDING_NAME=$(echo "$BINDING_CONTEXT" | jq -r '.[0].binding // "unknown"')

    echo "Event type: $EVENT_TYPE"
    echo "Binding name: $BINDING_NAME"

    # Process each event in the binding context
    echo "$BINDING_CONTEXT" | jq -c '.[]' | while read -r event; do
        event_type=$(echo "$event" | jq -r '.type')
        
        case "$event_type" in
            "Event")
                # Extract object details from the event
                object_name=$(echo "$event" | jq -r '.object.metadata.name // "unknown"')
                object_namespace=$(echo "$event" | jq -r '.object.metadata.namespace // "default"')
                watch_event=$(echo "$event" | jq -r '.watchEvent // "unknown"')
                expression=$(echo "$event" | jq -r '.object.spec.data.expr // ""')
                
                echo "=== Processing Expression Event ==="
                echo "Object: $object_namespace/$object_name"
                echo "Watch event: $watch_event"
                echo "Expression: $expression"
                
                # Placeholder processing logic
                case "$watch_event" in
                    "ADDED")
                        echo ">>> Processing new expression: $object_namespace/$object_name"
                        echo "Expression to build: $expression"
                        ;;
                    "MODIFIED")
                        echo ">>> Processing updated expression: $object_namespace/$object_name"
                        echo "New expression: $expression"
                        ;;
                    "DELETED")
                        echo ">>> Processing deleted expression: $object_namespace/$object_name"
                        ;;
                    *)
                        echo ">>> Unknown watch event: $watch_event"
                        ;;
                esac
                
                # Placeholder for actual processing
                echo ">>> Placeholder: Would execute nix build for expression"
                echo ">>> Command would be: nix build --expr '$expression'"
                echo ">>> Status update: expressions.cknix.cool/$object_namespace/$object_name"
                ;;
            "Synchronization")
                echo "=== Synchronization Event ==="
                echo "Processing initial synchronization..."
                ;;
            *)
                echo "=== Unknown Event Type: $event_type ==="
                ;;
        esac
    done

    echo "=== Hook execution completed ==="