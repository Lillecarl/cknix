#!/bin/bash

# Shell-operator hook for watching cknix Expression CRD changes
# This hook monitors expressions.cknix.cool custom resources and executes
# a placeholder script when changes occur.

set -e

# Hook configuration - output when called with --config
if [[ $1 == "--config" ]]; then
  cat ./lib/cknix-expression-watcher.yaml
  exit 0
fi

# Main hook execution
echo "=== cknix Expression Watcher Hook Triggered ==="
echo "Timestamp: $(date)"
echo "Binding context path: $BINDING_CONTEXT_PATH"

# Check if binding context is available
if [[ -z "$BINDING_CONTEXT_PATH" ]]; then
    echo "ERROR: No binding context path provided"
    exit 1
fi

if [[ ! -f "$BINDING_CONTEXT_PATH" ]]; then
    echo "ERROR: Binding context file not found: $BINDING_CONTEXT_PATH"
    exit 1
fi

# Read and parse binding context
echo "=== Binding Context ==="
cat "$BINDING_CONTEXT_PATH" | jq .

# Extract event details
BINDING_CONTEXT=$(cat "$BINDING_CONTEXT_PATH")
EVENT_TYPE=$(echo "$BINDING_CONTEXT" | jq -r '.[0].type')
BINDING_NAME=$(echo "$BINDING_CONTEXT" | jq -r '.[0].binding // "unknown"')

echo "Event type: $EVENT_TYPE"
echo "Binding name: $BINDING_NAME"

# Process each event in the binding context
echo "$BINDING_CONTEXT" | jq -c '.[]' | while read -r event; do
    event_type=$(echo "$event" | jq -r '.type')
    
    case "$event_type" in
        "Event")
            # Extract object details from the event
            object_name=$(echo "$event" | jq -r '.object.metadata.name // "unknown"')
            object_namespace=$(echo "$event" | jq -r '.object.metadata.namespace // "default"')
            watch_event=$(echo "$event" | jq -r '.watchEvent // "unknown"')
            expression=$(echo "$event" | jq -r '.object.spec.data.expr // ""')
            
            echo "=== Processing Expression Event ==="
            echo "Object: $object_namespace/$object_name"
            echo "Watch event: $watch_event"
            echo "Expression: $expression"
            
            # Call the placeholder processing script
            SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
            PROCESS_SCRIPT="$SCRIPT_DIR/../process-expression.sh"
            
            if [[ -f "$PROCESS_SCRIPT" ]]; then
                echo "Executing processing script..."
                "$PROCESS_SCRIPT" "$object_namespace" "$object_name" "$watch_event" "$expression"
            else
                echo "WARNING: Processing script not found: $PROCESS_SCRIPT"
                echo "Would execute: process-expression.sh '$object_namespace' '$object_name' '$watch_event' '$expression'"
            fi
            ;;
        "Synchronization")
            echo "=== Synchronization Event ==="
            echo "Processing initial synchronization..."
            # Handle initial sync if needed
            ;;
        *)
            echo "=== Unknown Event Type: $event_type ==="
            ;;
    esac
done

echo "=== Hook execution completed ==="